Pasos
1._ entrar a Google colab y entrar a un cuaderno
Insertar casilla de código para la limpieza de bibliotecas Qiskit y mandamos a correr
!pip uninstall -y qiskit qiskit-aer qiskit-terra
2._ en otra casilla de código instalamos las siguientes librerías:
# Celda 1: Instalación y configuración
!pip install qiskit
!pip install matplotlib
!pip install qiskit-aer
!pip install qiskit-ibm-runtime
!pip install pylatexenc
!pip install bluequbit
Después de esto mandamos a correr 
3._importamos las librerías necesarias en otra casilla de código, aquí no mandamos a correr
import qiskit
import numpy as np
from bluequbit import init
import matplotlib.pyplot as plt
from IPython.display import display, HTML
import os
from  getpass import getpass
from qiskit import QuantumCircuit, transpile
from qiskit_aer import AerSimulator  # Nuevo import para Aer 1.0
from qiskit.quantum_info import Statevector, DensityMatrix
from qiskit.visualization import plot_histogram, plot_bloch_multivector, plot_state_city
4._configuracion del programa, pegamos el siguiente código en otra casilla de código 
# Configuracion de la API key
def setup_api_key():
    print("Configurando BlueQubit API key...")
    api_key = getpass("Ingresa tu BlueQubit API key: ")
    os.environ["BLUEQUBIT_API_TOKEN"] = api_key
    return api_key

def run_bell_state_experiment(quantum):
    # Crear el circuito de estado de Bell
    print("Creando circuito para estado del Bel...")
    circuit = QuantumCircuit(2, 2)
    circuit.h(0)
    circuit.cx(0, 1)
    circuit.measure([0, 1], [0, 1])

    print("Ejecunatndo en dispositivo cuàntico real...")
    job = quantum.run(
        circuit,
        device="cpu",
        shots=1000
    )

    # Obtener los resultados usanso get_counts
    counts = job.get_counts()
    return counts

#Funciòn para visualizar la matriz de densidad
def plot_density_matrix(counts, total_shots) :
    # Reconstruir vector de estado aproximado desde las mediciones
    state_vector = np.zeros(4, dtype=complex)
    for state, count in counts.items():
        index = int(state, 2)
        state_vector[index] = np.sqrt(count/total_shots)

    density_matrix = np.outer(state_vector, np.conjugate(state_vector))

    plt.figure(figsize=(10, 8))
    plt.imshow(np.real(density_matrix), cmap='viridis')
    plt.colorbar(label='Amplitud')
    plt.title('Matriz de Densidad del Estado Cuàntico')
    plt.xlabel('Estado Base')
    plt.ylabel('Estado Base')

    states = ['|00)', '|01)','|10)', '|11)']
    plt.xticks( range(4), states)
    plt.yticks( range(4), states)
    plt.show()

# Bloch
def create_bloch_visualization():
    from mpl_toolkits.mplot3d import Axes3D

    fig = plt.figure(figsize=(8, 8))
    ax = fig.add_subplot(111, projection='3d')

    u=np.linspace(0, 2 * np.pi, 100)
    v=np.linspace(0, np.pi, 100)
    x=np.outer(np.cos(u), np.sin(v))
    y=np.outer(np.sin(u), np.sin(v))
    z=np.outer(np.ones_like(u), np.cos(v))

    ax.plot_surface(x, y, z, alpha=0.1, color='b')

    ax.quiver(0, 0, 0, 1, 0, 0, length=1.3, color='r', label='X')
    ax.quiver(0, 0, 0, 0, 1, 0, length=1.3, color='g', label='Y')
    ax.quiver(0, 0, 0, 0, 0, 1, length=1.3, color='b', label='Z')

    ax.set_title('Esfera de Bloch')
    ax.legend()
    plt.show()

def run_quantum_demo(api_key):
  os.environ["BLUEQUBIT_APT_TOKEN"] = api_key
  quantum = init(api_key)

  counts = run_bell_state_experiment(quantum)
  total_shots = sum(counts.values())

  # matriz de densidad
  print("\nMatriz de densidad del estado (reconstruida de mediciones):")
  plot_density_matrix(counts, total_shots)

  #Bloch
  print("\nVisualizaciòn de la esfera de Bloch:")
  create_bloch_visualization()

  print("\nResultados de las mediciones en el hardware cuàntico:")
  for state, count in counts.items():
      probability = count / total_shots
      print(f"|{state}): {probability:.4f} ({count} shots)")

print("¡Bienvenidos a la demostraciòn Cuàntica Interactiva usando Hardware Cuàntico Real!")

api_key = setup_api_key()
print("\nIniciando demostarciòn...")
run_quantum_demo(api_key)
5._ mandamos a correr esta ultima casilla y nos aparece  que debemos poner un codigo de BlueQubit
Para BlueQubit necesitamso entrar a este link https://www.bluequbit.io/platform
Vamos a la primera opción de free plan y aplastamos en get started, nos aparecerá que debemos iniciar sesión con Google, ponemos nuestro correo y en la parte de arriba junto a nuestra cuenta nos aparecerá “See API token”, aplastamos ahí y nso dirigimos a Google colab a poner nuestro token en la casilla donde nos piden, y así se mostrarían las graficas
